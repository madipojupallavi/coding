def generate_report(self, test_duration):
    """Generate Excel report with detailed failure analysis"""
    df = pd.DataFrame(self.results)
    
    # Calculate metrics
    success_count = df['success'].sum()
    failure_count = len(df) - success_count
    success_rate = (success_count / len(df)) * 100
    error_rate = (failure_count / len(df)) * 100  # New error rate calculation
    avg_response = df['response_time_sec'].mean()
    
    # Create Excel file with sheets
    with pd.ExcelWriter(OUTPUT_EXCEL, engine='openpyxl') as writer:
        # Sheet 1: Detailed Results
        df.to_excel(
            writer, 
            sheet_name='All Requests', 
            index=False,
            columns=[
                "token_generation_time",
                "process_id", 
                "api_status",
                "response_time_sec",
                "success",
                "url"
            ]
        )
        
        # Sheet 2: Failed Requests (Detailed Analysis)
        if not df[df['success'] == False].empty:
            failed_df = df[df['success'] == False].copy()
            failed_df['Failure Type'] = failed_df['api_status'].apply(
                lambda x: 'HTTP Error' if str(x).isdigit() else 'Exception'
            )
            
            failed_df.to_excel(
                writer,
                sheet_name='Failed Requests',
                index=False,
                columns=[
                    "token_generation_time",
                    "process_id",
                    "url",
                    "api_status",
                    "response_time_sec",
                    "Failure Type",
                    "error_details"
                ]
            )
        
        # Sheet 3: Summary (Enhanced with error rate)
        summary_data = {
            'Metric': [
                'Total Processes',
                'Successful',
                'Failed',
                'Success Rate',
                'Error Rate',  # New metric
                'Average Response Time',
                'Total Test Duration',
                'First Failure',
                'Last Failure'
            ],
            'Value': [
                TOTAL_PROCESSES,
                success_count,
                failure_count,
                f"{success_rate:.2f}%",
                f"{error_rate:.2f}%",  # New value
                f"{avg_response:.4f} sec",
                f"{test_duration:.2f} sec",
                df[df['success'] == False]['token_generation_time'].min() if not df[df['success'] == False].empty else 'N/A',
                df[df['success'] == False]['token_generation_time'].max() if not df[df['success'] == False].empty else 'N/A'
            ]
        }
        pd.DataFrame(summary_data).to_excel(
            writer, 
            sheet_name='Summary', 
            index=False
        )
        
        # Auto-adjust column widths and styling
        workbook = writer.book
        for sheetname in writer.sheets:
            sheet = workbook[sheetname]
            
            # Auto-width
            for col in sheet.columns:
                max_length = max(len(str(cell.value)) for cell in col)
                sheet.column_dimensions[col[0].column_letter].width = max_length + 2
            
            # Highlight failures in red
            if sheetname == 'All Requests':
                red_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
                for row in sheet.iter_rows(min_row=2, max_col=6, max_row=len(df)+1):
                    if not row[4].value:  # 'Success' column
                        for cell in row:
                            cell.fill = red_fill

        # Add failure statistics if any failures occurred
        if not df[df['success'] == False].empty:
            failure_stats = df[df['success'] == False]['api_status'].value_counts().reset_index()
            failure_stats.columns = ['Error Type', 'Count']
            failure_stats['Percentage'] = (failure_stats['Count'] / failure_count * 100).round(2).astype(str) + '%'
            failure_stats.to_excel(
                writer,
                sheet_name='Failure Stats',
                index=False
            )
