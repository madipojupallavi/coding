def generate_report(self, test_duration):
    """Generate Excel report with complete URLs and all response details"""
    df = pd.DataFrame(self.results)
    
    # Add URL columns
    df['auth_url'] = URL_AUTH
    df['process_id_url'] = URL_PROCESSING
    df['api_url'] = df['process_id'].apply(lambda x: URL_API.format(processUid=x) if x else "")
    
    # Add detailed failure analysis
    df['failure_details'] = df.apply(
        lambda row: f"Status: {row['api_status']} | Time: {row['response_time_sec']:.2f}s" if not row['success'] else "",
        axis=1
    )
    
    # Calculate metrics
    success_count = df['success'].sum()
    success_rate = (success_count / len(df)) * 100
    avg_response = df['response_time_sec'].mean()
    
    # Create Excel file
    with pd.ExcelWriter(OUTPUT_EXCEL, engine='openpyxl') as writer:
        # Main data sheet with all responses and URLs
        df.to_excel(
            writer,
            sheet_name='Test Results',
            index=False,
            columns=[
                "token_generation_time",
                "auth_url",
                "process_id",
                "process_id_url", 
                "api_url",
                "api_status",
                "response_time_sec",
                "success",
                "failure_details"
            ]
        )
        
        # Apply formatting
        workbook = writer.book
        sheet = workbook['Test Results']
        
        # Set custom headers
        headers = [
            "Token Time",
            "Auth URL",
            "Process ID", 
            "Process ID URL",
            "API URL",
            "API Status",
            "Response Time (s)",
            "Success",
            "Failure Details"
        ]
        for col_num, header in enumerate(headers, 1):
            sheet.cell(row=1, column=col_num, value=header).font = Font(bold=True)
        
        # Set column widths
        col_widths = {
            'A': 20,  # Token Time
            'B': 40,   # Auth URL
            'C': 20,   # Process ID
            'D': 40,   # Process ID URL
            'E': 40,   # API URL
            'F': 25,   # API Status
            'G': 15,   # Response Time
            'H': 10,   # Success
            'I': 40     # Failure Details
        }
        
        for col, width in col_widths.items():
            sheet.column_dimensions[col].width = width
        
        # Highlight failures
        red_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
        for row in sheet.iter_rows(min_row=2, max_col=9, max_row=len(df)+1):
            if not row[7].value:  # 'Success' column (H)
                for cell in row:
                    cell.fill = red_fill
        
        # Add summary at the bottom
        summary_start_row = len(df) + 3
        summary_data = [
            ["Test Summary", ""],
            ["Total Requests", len(df)],
            ["Successful", f"{success_count} ({success_rate:.2f}%)"],
            ["Failed", len(df) - success_count],
            ["Average Response Time", f"{avg_response:.4f} sec"],
            ["Test Duration", f"{test_duration:.2f} sec"]
        ]
        
        for i, (label, value) in enumerate(summary_data, start=summary_start_row):
            sheet.cell(row=i, column=1, value=label).font = Font(bold=True)
            sheet.cell(row=i, column=2, value=value)
        
        # Add failure statistics if any failures
        if not df[df['success'] == False].empty:
            stats_start = summary_start_row + len(summary_data) + 2
            sheet.cell(row=stats_start, column=1, value="Failure Statistics").font = Font(bold=True)
            
            failure_stats = df[df['success'] == False]['api_status'].value_counts().items()
            for i, (error, count) in enumerate(failure_stats, start=stats_start+1):
                sheet.cell(row=i, column=1, value=error)
                sheet.cell(row=i, column=2, value=count)
        
        # Freeze header row
        sheet.freeze_panes = "A2"
