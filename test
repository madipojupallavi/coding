
import pandas as pd
import numpy as np
from pathlib import Path

def compare_excel_sheets(input1_path, input2_path, output_path):
    """
    Compare two Excel sheets based on AI Holmes Response vs WorkFlowUI data
    and generate a combined output with status.
    
    Args:
        input1_path (str): Path to first Excel file with AI Holmes Response data
        input2_path (str): Path to second Excel file with WorkFlowUI data
        output_path (str): Path for output Excel file
    """
    
    try:
        # Read the Excel files
        print("Reading input files...")
        df1 = pd.read_excel(input1_path)
        df2 = pd.read_excel(input2_path)
        
        # Verify required columns exist
        required_cols_df1 = ['Attribute ID', 'Source', 'AI Holmes Response Key', 'AI Holmes Response Value']
        required_cols_df2 = ['Attribute ID', 'Source', 'WorkFlowUI Key', 'WorkFlowUI Value']
        
        for col in required_cols_df1:
            if col not in df1.columns:
                raise ValueError(f"Column '{col}' not found in input1 file")
                
        for col in required_cols_df2:
            if col not in df2.columns:
                raise ValueError(f"Column '{col}' not found in input2 file")
        
        print(f"Input1 shape: {df1.shape}")
        print(f"Input2 shape: {df2.shape}")
        
        # Perform merge on 'Attribute ID' and 'Source'
        print("Merging data...")
        merged_df = pd.merge(
            df1[required_cols_df1], 
            df2[required_cols_df2], 
            on=['Attribute ID', 'Source'], 
            how='outer',
            suffixes=('_input1', '_input2')
        )
        
        print(f"Merged data shape: {merged_df.shape}")
        
        # Handle NaN values for comparison
        merged_df['AI Holmes Response Key'] = merged_df['AI Holmes Response Key'].fillna('')
        merged_df['AI Holmes Response Value'] = merged_df['AI Holmes Response Value'].fillna('')
        merged_df['WorkFlowUI Key'] = merged_df['WorkFlowUI Key'].fillna('')
        merged_df['WorkFlowUI Value'] = merged_df['WorkFlowUI Value'].fillna('')
        
        # Convert to string for comparison to handle mixed data types
        merged_df['AI Holmes Response Key'] = merged_df['AI Holmes Response Key'].astype(str)
        merged_df['AI Holmes Response Value'] = merged_df['AI Holmes Response Value'].astype(str)
        merged_df['WorkFlowUI Key'] = merged_df['WorkFlowUI Key'].astype(str)
        merged_df['WorkFlowUI Value'] = merged_df['WorkFlowUI Value'].astype(str)
        
        # Create status column based on comparison
        def determine_status(row):
            # Check if both key and value match
            key_match = row['AI Holmes Response Key'] == row['WorkFlowUI Key']
            value_match = row['AI Holmes Response Value'] == row['WorkFlowUI Value']
            
            # Handle cases where data is missing from either source
            ai_has_data = (row['AI Holmes Response Key'] != '' and row['AI Holmes Response Key'] != 'nan') or \
                         (row['AI Holmes Response Value'] != '' and row['AI Holmes Response Value'] != 'nan')
            
            workflow_has_data = (row['WorkFlowUI Key'] != '' and row['WorkFlowUI Key'] != 'nan') or \
                               (row['WorkFlowUI Value'] != '' and row['WorkFlowUI Value'] != 'nan')
            
            if not ai_has_data and not workflow_has_data:
                return 'Both Empty'
            elif not ai_has_data:
                return 'Missing in AI Holmes'
            elif not workflow_has_data:
                return 'Missing in WorkFlowUI'
            elif key_match and value_match:
                return 'Matched'
            elif key_match and not value_match:
                return 'Key Match, Value Mismatch'
            elif not key_match and value_match:
                return 'Value Match, Key Mismatch'
            else:
                return 'No Match'
        
        print("Determining status for each row...")
        merged_df['Status'] = merged_df.apply(determine_status, axis=1)
        
        # Reorder columns for final output
        output_columns = [
            'Attribute ID', 
            'Source', 
            'AI Holmes Response Key', 
            'AI Holmes Response Value',
            'WorkFlowUI Key', 
            'WorkFlowUI Value',
            'Status'
        ]
        
        result_df = merged_df[output_columns]
        
        # Generate summary statistics
        print("\n=== COMPARISON SUMMARY ===")
        print(f"Total records processed: {len(result_df)}")
        print("\nStatus breakdown:")
        status_counts = result_df['Status'].value_counts()
        for status, count in status_counts.items():
            percentage = (count / len(result_df)) * 100
            print(f"  {status}: {count} ({percentage:.1f}%)")
        
        print(f"\nSource breakdown:")
        source_counts = result_df['Source'].value_counts()
        for source, count in source_counts.items():
            print(f"  {source}: {count}")
        
        # Save to Excel
        print(f"\nSaving results to: {output_path}")
        with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
            # Main results sheet
            result_df.to_excel(writer, sheet_name='Comparison Results', index=False)
            
            # Summary sheet
            summary_data = {
                'Metric': ['Total Records', 'Matched Records', 'Mismatched Records', 'Missing in AI Holmes', 'Missing in WorkFlowUI'],
                'Count': [
                    len(result_df),
                    len(result_df[result_df['Status'] == 'Matched']),
                    len(result_df[result_df['Status'].isin(['No Match', 'Key Match, Value Mismatch', 'Value Match, Key Mismatch'])]),
                    len(result_df[result_df['Status'] == 'Missing in AI Holmes']),
                    len(result_df[result_df['Status'] == 'Missing in WorkFlowUI'])
                ]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='Summary', index=False)
        
        print("✅ Comparison completed successfully!")
        return result_df
        
    except FileNotFoundError as e:
        print(f"❌ File not found: {e}")
        return None
    except Exception as e:
        print(f"❌ Error occurred: {str(e)}")
        return None

# Example usage
if __name__ == "__main__":
    # Set your file paths here
    input1 = "path/to/your/input1.xlsx"  # Replace with actual path
    input2 = "path/to/your/input2.xlsx"  # Replace with actual path
    output = "path/to/your/output.xlsx"  # Replace with actual path
    
    # Run the comparison
    result = compare_excel_sheets(input1, input2, output)
    
    if result is not None:
        print(f"\nFirst 5 rows of results:")
        print(result.head())
