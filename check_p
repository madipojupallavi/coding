from pypdf import PdfReader, PdfWriter
import re

def get_page_number_from_field(field_name):
    """
    Extract page number from field name like 'topmostSubform[0].Page1[0].f1_1[0]'
    Returns the page number (1-indexed) or None if not found
    """
    match = re.search(r'\.Page(\d+)\[', field_name)
    if match:
        return int(match.group(1))
    return None

def group_fields_by_page(field_data):
    """
    Group field data by page number
    """
    page_fields = {}
    
    for field_name, field_value in field_data.items():
        page_num = get_page_number_from_field(field_name)
        if page_num is not None:
            if page_num not in page_fields:
                page_fields[page_num] = {}
            page_fields[page_num][field_name] = field_value
        else:
            # If we can't determine the page, add to page 1 as fallback
            if 1 not in page_fields:
                page_fields[1] = {}
            page_fields[1][field_name] = field_value
    
    return page_fields

def fill_pdf_form_smart(input_pdf_path, output_pdf_path, field_data):
    """
    Smart method: Group fields by page and update each page with its specific fields
    """
    reader = PdfReader(input_pdf_path)
    writer = PdfWriter()
    writer.clone_reader_document_root(reader)
    
    if not writer.get_fields():
        print("No form fields found")
        return False
    
    # Group fields by page
    page_fields = group_fields_by_page(field_data)
    print(f"Fields grouped by page: {list(page_fields.keys())}")
    
    fields_updated = 0
    total_fields_attempted = 0
    
    # Update each page with its specific fields
    for page_num, page in enumerate(writer.pages, 1):  # 1-indexed
        if page_num in page_fields:
            page_field_data = page_fields[page_num]
            print(f"\nPage {page_num}: Attempting to update {len(page_field_data)} fields")
            
            for field_name, field_value in page_field_data.items():
                print(f"  Updating: {field_name} = '{field_value}'")
                total_fields_attempted += 1
            
            try:
                writer.update_page_form_field_values(page, page_field_data)
                fields_updated += len(page_field_data)
                print(f"  ✓ Successfully updated {len(page_field_data)} fields on page {page_num}")
            except Exception as e:
                print(f"  ✗ Error updating page {page_num}: {str(e)}")
        else:
            print(f"Page {page_num}: No fields to update")
    
    with open(output_pdf_path, 'wb') as output_file:
        writer.write(output_file)
    
    print(f"\nSummary: Updated {fields_updated}/{total_fields_attempted} fields")
    return True

def test_checkbox_values_simple(input_pdf, checkbox_field):
    """
    Simple checkbox testing - try different values and see which ones work
    """
    test_values = ['/Yes', '/On', '/1', 'Yes', 'On', '1', 'True', '/True']
    
    print(f"\nTesting checkbox values for: {checkbox_field}")
    print("-" * 50)
    
    for test_value in test_values:
        try:
            # Create test data with just this checkbox
            test_data = {checkbox_field: test_value}
            
            # Try to fill the form
            reader = PdfReader(input_pdf)
            writer = PdfWriter()
            writer.clone_reader_document_root(reader)
            
            page_fields = group_fields_by_page(test_data)
            
            for page_num, page in enumerate(writer.pages, 1):
                if page_num in page_fields:
                    writer.update_page_form_field_values(page, page_fields[page_num])
            
            # Check the result
            fields = writer.get_fields()
            if checkbox_field in fields:
                actual_value = fields[checkbox_field].get('/V', 'None')
                is_checked = actual_value != '/Off' and actual_value is not None
                status = "✓ CHECKED" if is_checked else "✗ Not checked"
                print(f"  {test_value:10} -> {actual_value:15} {status}")
                
                if is_checked:
                    return test_value  # Return the first working value
            else:
                print(f"  {test_value:10} -> Field not found")
                
        except Exception as e:
            print(f"  {test_value:10} -> Error: {str(e)}")
    
    return None

def verify_filled_pdf(pdf_path):
    """
    Verify if the PDF was actually filled, organized by page
    """
    print(f"\n=== VERIFYING FILLED PDF: {pdf_path} ===")
    reader = PdfReader(pdf_path)
    writer = PdfWriter()
    writer.clone_reader_document_root(reader)
    
    fields = writer.get_fields()
    if not fields:
        print("No fields found in filled PDF")
        return
    
    filled_by_page = {}
    checkbox_count = {"checked": 0, "unchecked": 0}
    
    for field_name, field_obj in fields.items():
        value = field_obj.get('/V', None)
        if value:
            page_num = get_page_number_from_field(field_name)
            if page_num not in filled_by_page:
                filled_by_page[page_num] = []
            filled_by_page[page_num].append((field_name, value))
            
            # Count checkboxes
            if '.c' in field_name:  # Checkbox field
                if value == '/Off':
                    checkbox_count["unchecked"] += 1
                else:
                    checkbox_count["checked"] += 1
    
    if filled_by_page:
        for page_num in sorted(filled_by_page.keys()):
            print(f"\nPage {page_num} - Filled fields:")
            for field_name, value in filled_by_page[page_num]:
                # Show checkbox status more clearly
                if '.c' in field_name:
                    status = "CHECKED" if value != '/Off' else "unchecked"
                    print(f"  {field_name} = {value} ({status})")
                else:
                    print(f"  {field_name} = '{value}'")
    else:
        print("No filled fields found")
    
    print(f"\nCheckbox Summary: {checkbox_count['checked']} checked, {checkbox_count['unchecked']} unchecked")

# Test data
field_data = {
    # Page 1 fields
    "topmostSubform[0].Page1[0].f1_1[0]": "John Doe Smith",
    "topmostSubform[0].Page1[0].f1_2[0]": "Individual",
    "topmostSubform[0].Page1[0].f1_3[0]": "US Citizen",
    "topmostSubform[0].Page1[0].f1_4[0]": "123 Main Street",
    "topmostSubform[0].Page1[0].f1_5[0]": "New York",
    "topmostSubform[0].Page1[0].f1_6[0]": "NY",
    "topmostSubform[0].Page1[0].f1_7[0]": "10001",
    "topmostSubform[0].Page1[0].f1_8[0]": "USA",
    
    # Page 2 fields
    "topmostSubform[0].Page2[0].f2_1[0]": "United States",
    "topmostSubform[0].Page2[0].Line9a_ReadOrder[0].f2_2[0]": "123-45-6789",
    "topmostSubform[0].Page2[0].Line9b_ReadOrder[0].f2_3[0]": "987-65-4321",
    "topmostSubform[0].Page2[0].f2_4[0]": "01/15/1985",
    "topmostSubform[0].Page2[0].f2_5[0]": "New York",
    "topmostSubform[0].Page2[0].f2_6[0]": "NY",
    
    # Page 3 fields
    "topmostSubform[0].Page3[0].f3_1[0]": "Some Page 3 Data",
    
    # Page 8 fields
    "topmostSubform[0].Page8[0].f8_1[0]": "Additional Info",
    "topmostSubform[0].Page8[0].Table_Part29[0].BodyRow1[0].f8_3[0]": "Row 1 Col 1",
    "topmostSubform[0].Page8[0].Table_Part29[0].BodyRow1[0].f8_4[0]": "Row 1 Col 2",
}

if __name__ == "__main__":
    input_pdf = "W8.pdf"
    
    # Test checkbox values first
    print("=== TESTING CHECKBOX VALUES ===")
    test_checkbox = "topmostSubform[0].Page1[0].c1_1[0]"
    working_checkbox_value = test_checkbox_values_simple(input_pdf, test_checkbox)
    
    if working_checkbox_value:
        print(f"\n✓ Found working checkbox value: {working_checkbox_value}")
        
        # Add checkboxes to the field data
        field_data_with_checkboxes = field_data.copy()
        field_data_with_checkboxes.update({
            "topmostSubform[0].Page1[0].c1_1[0]": working_checkbox_value,
            "topmostSubform[0].Page1[0].c1_1[1]": working_checkbox_value,
            "topmostSubform[0].Page2[0].c2_1[0]": working_checkbox_value,
            "topmostSubform[0].Page3[0].c3_1[0]": working_checkbox_value,
        })
        
        print("\n=== FILLING FORM WITH CHECKBOXES ===")
        success = fill_pdf_form_smart(input_pdf, "W8_filled_with_checkboxes.pdf", field_data_with_checkboxes)
        if success:
            verify_filled_pdf("W8_filled_with_checkboxes.pdf")
    else:
        print("\n✗ No working checkbox value found")
        
        print("\n=== FILLING FORM WITHOUT CHECKBOXES ===")
        success = fill_pdf_form_smart(input_pdf, "W8_filled_regular.pdf", field_data)
        if success:
            verify_filled_pdf("W8_filled_regular.pdf")
